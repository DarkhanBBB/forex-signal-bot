import asyncio
import logging
import os
from datetime import datetime, timedelta
from telegram import Bot
from data_utils import load_data_history, save_data_history, append_new_data, get_combined_data
from model_manager import train_or_load_model
from trading_utils import prepare_data, confidence_score, should_enter_trade
from twelve_data_api import download

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
SYMBOLS = ["EUR/USD", "XAU/USD"]
TIMEFRAMES = ["1h", "2h", "3h", "4h"]
MODEL_PATH = "model.keras"
LOG_FILE = "bot.log"
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(message)s")
logger = logging.getLogger()
file_handler = logging.FileHandler(LOG_FILE)
logger.addHandler(file_handler)

async def send_message(bot, text):
    try:
        await bot.send_message(chat_id=TELEGRAM_CHAT_ID, text=text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {e}")

async def analyze_symbol(symbol, interval, bot):
    try:
        logger.info(f"üìä –ê–Ω–∞–ª–∏–∑ {symbol} ({interval})")
        end_time = datetime.utcnow()
        start_time = end_time - timedelta(days=30)

        new_data = download(symbol, interval, start_time, end_time)
        if new_data is None or new_data.empty:
            await send_message(bot, f"‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ {symbol} ({interval})")
            return

        X_new, y_new = prepare_data(new_data)
        if len(X_new) == 0:
            await send_message(bot, f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ {symbol} ({interval})")
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
        history = load_data_history(symbol, interval)
        updated = append_new_data(history, new_data, X_new, y_new)
        save_data_history(symbol, interval, updated)

        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
        X_total, y_total = get_combined_data(symbol, interval)
        if X_total.shape[0] == 0:
            await send_message(bot, f"‚ùå –ù–µ—Ç –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ {symbol} ({interval})")
            return

        model = train_or_load_model(X_total, y_total, model_path=MODEL_PATH)
        prediction = model.predict(X_new[-1].reshape(1, *X_new.shape[1:]))[0]
        conf = confidence_score(prediction)
        direction = should_enter_trade(prediction, conf)

        msg = f"üìâ {symbol} ({interval})\n–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {conf:.2f}%"
        msg += f"\nüí° –°–∏–≥–Ω–∞–ª: {direction.upper()}" if direction else "\n‚õî –°–∏–≥–Ω–∞–ª–∞ –Ω–µ—Ç"
        await send_message(bot, msg)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ {symbol} {interval}: {e}")
        await send_message(bot, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ {symbol} ({interval}): {e}")

async def main():
    bot = Bot(token=TELEGRAM_BOT_TOKEN)
    await send_message(bot, "ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç 24/7")
    while True:
        for symbol in SYMBOLS:
            for interval in TIMEFRAMES:
                await analyze_symbol(symbol, interval, bot)
        await asyncio.sleep(1800)  # –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("‚õî –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é.")
